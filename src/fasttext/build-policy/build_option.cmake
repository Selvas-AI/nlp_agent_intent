# Platform definitions
add_definitions(-DUNICODE -D_UNICODE)

if(BUILD_HANWANG_ENGINE)
  add_definitions(-D_HANWANG)
endif()

if(RECOG_MODE_CURSIVE)
  add_definitions(-D_CURSIVE_TEST)
endif()

if (RECOG_MODE_OVERLAPPED)
  add_definitions(-D_OVERLAPPED_TEST)
endif()

if (APPLE OR RVCT)
  set(STATIC_BUILD_EXTERNAL_LIBRARY ON)
endif()

if(MINGW)
  add_definitions(-D_WIN32_POSIX)
  add_definitions(-D_MINGW)
elseif(CYGWIN)
  add_definitions(-D_WIN32_POSIX)
  add_definitions(-D_CYGWIN)
elseif(ANDROID)
  add_definitions(-D_LINUX)
  add_definitions(-D_ANDROID)
elseif(TIZEN)
  add_definitions(-D_LINUX)
  add_definitions(-D_TIZEN)
elseif(IOS)
  add_definitions(-D_LINUX)
  add_definitions(-D_DARWIN)
elseif(RVCT)
  add_definitions(-D_ARM)
  add_definitions(-D_RVCT)
elseif(UNIX)
  add_definitions(-D_LINUX)
endif()

if (CMAKE_BUILD_TYPE MATCHES Debug)
  add_definitions(-D_DEBUG)
endif()
if (BITNESS EQUAL 64 AND NOT OPTION_FORCE_BUILD_32BIT)
  add_definitions(-D_64BIT)
endif()

if(TIZEN)
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
elseif(MSVC)
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /D_CRT_SECURE_NO_WARNINGS /wd4819")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /D_CRT_SECURE_NO_WARNINGS /wd4819")
  # Visual Studio Project Group Setting
  set_property(GLOBAL PROPERTY USE_FOLDERS ON) 
elseif(ANDROID)
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pie -fexceptions -frtti")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pie -fpermissive -fexceptions -frtti")
  if (NOT ANDROID_COMPILER_VERSION VERSION_LESS 4.9) 
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fno-tree-loop-vectorize")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-tree-loop-vectorize")
  endif()
  set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -rdynamic")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -rdynamic")
elseif(IOS)
  if (${IOS_PLATFORM} STREQUAL "SIMULATOR")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mios-simulator-version-min=7.0")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mios-simulator-version-min=7.0")
  endif()
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -arch ${IOS_ARCH}")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -arch ${IOS_ARCH}")
elseif(RVCT)
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} --exceptions")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --exceptions")
elseif(UNIX)
  set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -O0")
  set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0")
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
  # For mocha is not support x64, It need to gcc-multilib, g++-multilib
  if(CMAKE_SIZEOF_VOID_P EQUAL 8 AND TARGET_ABI STREQUAL "x86")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m32")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m32")
  endif()
  if (${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-deprecated-register")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-deprecated-register")
  endif()
endif()

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE "Release")
endif()
if("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
  set(CPACK_BUILD_CONFIG "Debug")
else()
  set(CPACK_BUILD_CONFIG "Release")
endif()

# Options for the code coverage 
if(BUILD_CODE_COVERAGE)
  if(CMAKE_COMPILER_IS_GNUCXX)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fprofile-arcs -ftest-coverage")
    set(CMAKE_C_LINK_FLAGS "${CMAKE_C_LINK_FLAGS} -fprofile-arcs")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage")
    set(CMAKE_CXX_LINK_FLAGS "${CMAKE_CXX_LINK_FLAGS} -fprofile-arcs")
  else()
    message("Compiler does not support the code coverage")  
  endif()
endif()

if(USE_OPENMP)
  include(FindOpenMP)
  if(OPENMP_FOUND)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
  endif()
endif()

# Set a strip linker option
if(CMAKE_BUILD_TYPE MATCHES "Rel" AND NOT WIN32)
    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -s")
endif()
