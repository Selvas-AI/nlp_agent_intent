# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_fasttext')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_fasttext')
    _fasttext = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fasttext', [dirname(__file__)])
        except ImportError:
            import _fasttext
            return _fasttext
        try:
            _mod = imp.load_module('_fasttext', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _fasttext = swig_import_helper()
    del swig_import_helper
else:
    import _fasttext
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

FASTTEXT_WRAPPER_H_ = _fasttext.FASTTEXT_WRAPPER_H_
class FasttextWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FasttextWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FasttextWrapper, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fasttext.new_FasttextWrapper()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fasttext.delete_FasttextWrapper
    __del__ = lambda self: None

    def LoadModel(self, path):
        return _fasttext.FasttextWrapper_LoadModel(self, path)

    def Train(self, info):
        return _fasttext.FasttextWrapper_Train(self, info)

    def Analogies(self, k, A, B, C):
        return _fasttext.FasttextWrapper_Analogies(self, k, A, B, C)

    def NN(self, k, query):
        return _fasttext.FasttextWrapper_NN(self, k, query)

    def GetNgrams(self, word):
        return _fasttext.FasttextWrapper_GetNgrams(self, word)

    def GetSentenceVector(self, query):
        return _fasttext.FasttextWrapper_GetSentenceVector(self, query)

    def GetWordVectors(self, query):
        return _fasttext.FasttextWrapper_GetWordVectors(self, query)

    def Predict(self, k, query):
        return _fasttext.FasttextWrapper_Predict(self, k, query)

    def Test(self, k, file_path):
        return _fasttext.FasttextWrapper_Test(self, k, file_path)

    def Quantize(self, info):
        return _fasttext.FasttextWrapper_Quantize(self, info)
FasttextWrapper_swigregister = _fasttext.FasttextWrapper_swigregister
FasttextWrapper_swigregister(FasttextWrapper)

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fasttext.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _fasttext.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _fasttext.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _fasttext.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _fasttext.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _fasttext.SwigPyIterator_equal(self, x)

    def copy(self):
        return _fasttext.SwigPyIterator_copy(self)

    def next(self):
        return _fasttext.SwigPyIterator_next(self)

    def __next__(self):
        return _fasttext.SwigPyIterator___next__(self)

    def previous(self):
        return _fasttext.SwigPyIterator_previous(self)

    def advance(self, n):
        return _fasttext.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _fasttext.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _fasttext.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _fasttext.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _fasttext.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _fasttext.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _fasttext.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _fasttext.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class result(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, result, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fasttext.new_result(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _fasttext.result_first_set
    __swig_getmethods__["first"] = _fasttext.result_first_get
    if _newclass:
        first = _swig_property(_fasttext.result_first_get, _fasttext.result_first_set)
    __swig_setmethods__["second"] = _fasttext.result_second_set
    __swig_getmethods__["second"] = _fasttext.result_second_get
    if _newclass:
        second = _swig_property(_fasttext.result_second_get, _fasttext.result_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _fasttext.delete_result
    __del__ = lambda self: None
result_swigregister = _fasttext.result_swigregister
result_swigregister(result)

class realVectorResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, realVectorResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, realVectorResult, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fasttext.new_realVectorResult(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _fasttext.realVectorResult_first_set
    __swig_getmethods__["first"] = _fasttext.realVectorResult_first_get
    if _newclass:
        first = _swig_property(_fasttext.realVectorResult_first_get, _fasttext.realVectorResult_first_set)
    __swig_setmethods__["second"] = _fasttext.realVectorResult_second_set
    __swig_getmethods__["second"] = _fasttext.realVectorResult_second_get
    if _newclass:
        second = _swig_property(_fasttext.realVectorResult_second_get, _fasttext.realVectorResult_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _fasttext.delete_realVectorResult
    __del__ = lambda self: None
realVectorResult_swigregister = _fasttext.realVectorResult_swigregister
realVectorResult_swigregister(realVectorResult)

class returnType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, returnType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, returnType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fasttext.new_returnType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _fasttext.returnType_first_set
    __swig_getmethods__["first"] = _fasttext.returnType_first_get
    if _newclass:
        first = _swig_property(_fasttext.returnType_first_get, _fasttext.returnType_first_set)
    __swig_setmethods__["second"] = _fasttext.returnType_second_set
    __swig_getmethods__["second"] = _fasttext.returnType_second_get
    if _newclass:
        second = _swig_property(_fasttext.returnType_second_get, _fasttext.returnType_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _fasttext.delete_returnType
    __del__ = lambda self: None
returnType_swigregister = _fasttext.returnType_swigregister
returnType_swigregister(returnType)

class vectorListReturnType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorListReturnType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorListReturnType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fasttext.new_vectorListReturnType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _fasttext.vectorListReturnType_first_set
    __swig_getmethods__["first"] = _fasttext.vectorListReturnType_first_get
    if _newclass:
        first = _swig_property(_fasttext.vectorListReturnType_first_get, _fasttext.vectorListReturnType_first_set)
    __swig_setmethods__["second"] = _fasttext.vectorListReturnType_second_set
    __swig_getmethods__["second"] = _fasttext.vectorListReturnType_second_get
    if _newclass:
        second = _swig_property(_fasttext.vectorListReturnType_second_get, _fasttext.vectorListReturnType_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _fasttext.delete_vectorListReturnType
    __del__ = lambda self: None
vectorListReturnType_swigregister = _fasttext.vectorListReturnType_swigregister
vectorListReturnType_swigregister(vectorListReturnType)

class vectorReturnType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorReturnType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorReturnType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fasttext.new_vectorReturnType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _fasttext.vectorReturnType_first_set
    __swig_getmethods__["first"] = _fasttext.vectorReturnType_first_get
    if _newclass:
        first = _swig_property(_fasttext.vectorReturnType_first_get, _fasttext.vectorReturnType_first_set)
    __swig_setmethods__["second"] = _fasttext.vectorReturnType_second_set
    __swig_getmethods__["second"] = _fasttext.vectorReturnType_second_get
    if _newclass:
        second = _swig_property(_fasttext.vectorReturnType_second_get, _fasttext.vectorReturnType_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _fasttext.delete_vectorReturnType
    __del__ = lambda self: None
vectorReturnType_swigregister = _fasttext.vectorReturnType_swigregister
vectorReturnType_swigregister(vectorReturnType)

class stringReturnType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stringReturnType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stringReturnType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fasttext.new_stringReturnType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _fasttext.stringReturnType_first_set
    __swig_getmethods__["first"] = _fasttext.stringReturnType_first_get
    if _newclass:
        first = _swig_property(_fasttext.stringReturnType_first_get, _fasttext.stringReturnType_first_set)
    __swig_setmethods__["second"] = _fasttext.stringReturnType_second_set
    __swig_getmethods__["second"] = _fasttext.stringReturnType_second_get
    if _newclass:
        second = _swig_property(_fasttext.stringReturnType_second_get, _fasttext.stringReturnType_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _fasttext.delete_stringReturnType
    __del__ = lambda self: None
stringReturnType_swigregister = _fasttext.stringReturnType_swigregister
stringReturnType_swigregister(stringReturnType)

class resultList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, resultList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, resultList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _fasttext.resultList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fasttext.resultList___nonzero__(self)

    def __bool__(self):
        return _fasttext.resultList___bool__(self)

    def __len__(self):
        return _fasttext.resultList___len__(self)

    def __getslice__(self, i, j):
        return _fasttext.resultList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fasttext.resultList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fasttext.resultList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fasttext.resultList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fasttext.resultList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fasttext.resultList___setitem__(self, *args)

    def pop(self):
        return _fasttext.resultList_pop(self)

    def append(self, x):
        return _fasttext.resultList_append(self, x)

    def empty(self):
        return _fasttext.resultList_empty(self)

    def size(self):
        return _fasttext.resultList_size(self)

    def swap(self, v):
        return _fasttext.resultList_swap(self, v)

    def begin(self):
        return _fasttext.resultList_begin(self)

    def end(self):
        return _fasttext.resultList_end(self)

    def rbegin(self):
        return _fasttext.resultList_rbegin(self)

    def rend(self):
        return _fasttext.resultList_rend(self)

    def clear(self):
        return _fasttext.resultList_clear(self)

    def get_allocator(self):
        return _fasttext.resultList_get_allocator(self)

    def pop_back(self):
        return _fasttext.resultList_pop_back(self)

    def erase(self, *args):
        return _fasttext.resultList_erase(self, *args)

    def __init__(self, *args):
        this = _fasttext.new_resultList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _fasttext.resultList_push_back(self, x)

    def front(self):
        return _fasttext.resultList_front(self)

    def back(self):
        return _fasttext.resultList_back(self)

    def assign(self, n, x):
        return _fasttext.resultList_assign(self, n, x)

    def resize(self, *args):
        return _fasttext.resultList_resize(self, *args)

    def insert(self, *args):
        return _fasttext.resultList_insert(self, *args)

    def reserve(self, n):
        return _fasttext.resultList_reserve(self, n)

    def capacity(self):
        return _fasttext.resultList_capacity(self)
    __swig_destroy__ = _fasttext.delete_resultList
    __del__ = lambda self: None
resultList_swigregister = _fasttext.resultList_swigregister
resultList_swigregister(resultList)

class realVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, realVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, realVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _fasttext.realVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fasttext.realVector___nonzero__(self)

    def __bool__(self):
        return _fasttext.realVector___bool__(self)

    def __len__(self):
        return _fasttext.realVector___len__(self)

    def __getslice__(self, i, j):
        return _fasttext.realVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fasttext.realVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fasttext.realVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fasttext.realVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fasttext.realVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fasttext.realVector___setitem__(self, *args)

    def pop(self):
        return _fasttext.realVector_pop(self)

    def append(self, x):
        return _fasttext.realVector_append(self, x)

    def empty(self):
        return _fasttext.realVector_empty(self)

    def size(self):
        return _fasttext.realVector_size(self)

    def swap(self, v):
        return _fasttext.realVector_swap(self, v)

    def begin(self):
        return _fasttext.realVector_begin(self)

    def end(self):
        return _fasttext.realVector_end(self)

    def rbegin(self):
        return _fasttext.realVector_rbegin(self)

    def rend(self):
        return _fasttext.realVector_rend(self)

    def clear(self):
        return _fasttext.realVector_clear(self)

    def get_allocator(self):
        return _fasttext.realVector_get_allocator(self)

    def pop_back(self):
        return _fasttext.realVector_pop_back(self)

    def erase(self, *args):
        return _fasttext.realVector_erase(self, *args)

    def __init__(self, *args):
        this = _fasttext.new_realVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _fasttext.realVector_push_back(self, x)

    def front(self):
        return _fasttext.realVector_front(self)

    def back(self):
        return _fasttext.realVector_back(self)

    def assign(self, n, x):
        return _fasttext.realVector_assign(self, n, x)

    def resize(self, *args):
        return _fasttext.realVector_resize(self, *args)

    def insert(self, *args):
        return _fasttext.realVector_insert(self, *args)

    def reserve(self, n):
        return _fasttext.realVector_reserve(self, n)

    def capacity(self):
        return _fasttext.realVector_capacity(self)
    __swig_destroy__ = _fasttext.delete_realVector
    __del__ = lambda self: None
realVector_swigregister = _fasttext.realVector_swigregister
realVector_swigregister(realVector)

class vectorResultList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorResultList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorResultList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _fasttext.vectorResultList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fasttext.vectorResultList___nonzero__(self)

    def __bool__(self):
        return _fasttext.vectorResultList___bool__(self)

    def __len__(self):
        return _fasttext.vectorResultList___len__(self)

    def __getslice__(self, i, j):
        return _fasttext.vectorResultList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fasttext.vectorResultList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fasttext.vectorResultList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fasttext.vectorResultList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fasttext.vectorResultList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fasttext.vectorResultList___setitem__(self, *args)

    def pop(self):
        return _fasttext.vectorResultList_pop(self)

    def append(self, x):
        return _fasttext.vectorResultList_append(self, x)

    def empty(self):
        return _fasttext.vectorResultList_empty(self)

    def size(self):
        return _fasttext.vectorResultList_size(self)

    def swap(self, v):
        return _fasttext.vectorResultList_swap(self, v)

    def begin(self):
        return _fasttext.vectorResultList_begin(self)

    def end(self):
        return _fasttext.vectorResultList_end(self)

    def rbegin(self):
        return _fasttext.vectorResultList_rbegin(self)

    def rend(self):
        return _fasttext.vectorResultList_rend(self)

    def clear(self):
        return _fasttext.vectorResultList_clear(self)

    def get_allocator(self):
        return _fasttext.vectorResultList_get_allocator(self)

    def pop_back(self):
        return _fasttext.vectorResultList_pop_back(self)

    def erase(self, *args):
        return _fasttext.vectorResultList_erase(self, *args)

    def __init__(self, *args):
        this = _fasttext.new_vectorResultList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _fasttext.vectorResultList_push_back(self, x)

    def front(self):
        return _fasttext.vectorResultList_front(self)

    def back(self):
        return _fasttext.vectorResultList_back(self)

    def assign(self, n, x):
        return _fasttext.vectorResultList_assign(self, n, x)

    def resize(self, *args):
        return _fasttext.vectorResultList_resize(self, *args)

    def insert(self, *args):
        return _fasttext.vectorResultList_insert(self, *args)

    def reserve(self, n):
        return _fasttext.vectorResultList_reserve(self, n)

    def capacity(self):
        return _fasttext.vectorResultList_capacity(self)
    __swig_destroy__ = _fasttext.delete_vectorResultList
    __del__ = lambda self: None
vectorResultList_swigregister = _fasttext.vectorResultList_swigregister
vectorResultList_swigregister(vectorResultList)

# This file is compatible with both classic and new-style classes.


